// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Update extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Update entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Update entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Update", id.toString(), this);
  }

  static load(id: string): Update | null {
    return store.get("Update", id) as Update | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocknumber(): BigInt {
    let value = this.get("blocknumber");
    return value.toBigInt();
  }

  set blocknumber(value: BigInt) {
    this.set("blocknumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get index(): string {
    let value = this.get("index");
    return value.toString();
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }
}

export class Index extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Index entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Index entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Index", id.toString(), this);
  }

  static load(id: string): Index | null {
    return store.get("Index", id) as Index | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get latestUpdate(): string | null {
    let value = this.get("latestUpdate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdate(value: string | null) {
    if (value === null) {
      this.unset("latestUpdate");
    } else {
      this.set("latestUpdate", Value.fromString(value as string));
    }
  }

  get updates(): Array<string> {
    let value = this.get("updates");
    return value.toStringArray();
  }

  set updates(value: Array<string>) {
    this.set("updates", Value.fromStringArray(value));
  }

  get numUpdates(): BigInt {
    let value = this.get("numUpdates");
    return value.toBigInt();
  }

  set numUpdates(value: BigInt) {
    this.set("numUpdates", Value.fromBigInt(value));
  }
}
